
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODULOrightUMINUSASSIGN AUTO BREAK CASE CHAR COMMA CONST CONSTANT CONTINUE DEFAULT DIVIDE DO DOUBLE ELSE ENUM EQ EXTERN FLOAT FLOAT_CONSTANT FOR GE GOTO GT ID IF INT LBRACE LBRACKET LE LONG LPAREN LT MINUS MODULO NE PLUS RBRACE RBRACKET REGISTER RETURN RPAREN SEMICOLON SHORT SIGNED SIZEOF STATIC STRING STRUCT SWITCH TIMES TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : statement_liststatement_list : statement_list statement\n                         | statementstatement : assignment\n                    | if_statement\n                    | for_statement\n                    | block\n                    | declarationdeclaration : INT ID SEMICOLON\n                      | FLOAT ID SEMICOLON\n                      | CHAR ID SEMICOLON\n                      | DOUBLE ID SEMICOLON\n                      | VOID ID SEMICOLONassignment : ID ASSIGN expression SEMICOLONif_statement : IF LPAREN condition RPAREN statement\n                       | IF LPAREN condition RPAREN statement ELSE statementfor_statement : FOR LPAREN assignment condition SEMICOLON for_increment RPAREN statementfor_increment : ID ASSIGN expressionblock : LBRACE statement_list RBRACEexpression : expression PLUS expression\n                     | expression MINUS expression\n                     | expression TIMES expression\n                     | expression DIVIDE expression\n                     | expression MODULO expressionexpression : MINUS expression %prec UMINUSexpression : IDexpression : CONSTANT\n                     | FLOAT_CONSTANTexpression : LPAREN expression RPARENcondition : expression LT expression\n                    | expression LE expression\n                    | expression GT expression\n                    | expression GE expression\n                    | expression EQ expression\n                    | expression NE expression'
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,8,12,13,14,15,16,17,18,19,20,21,22,30,33,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,65,72,73,76,77,78,79,],[9,9,-3,-4,-5,-6,-7,-8,9,23,24,25,26,27,-2,28,28,9,9,28,28,28,-19,-9,-10,-11,-12,-13,-14,28,28,28,28,28,9,28,28,28,28,28,28,-15,75,9,-16,9,28,-17,]),'IF':([0,2,3,4,5,6,7,8,12,18,22,37,38,39,40,41,42,43,51,65,73,76,77,79,],[10,10,-3,-4,-5,-6,-7,-8,10,-2,10,-19,-9,-10,-11,-12,-13,-14,10,-15,10,-16,10,-17,]),'FOR':([0,2,3,4,5,6,7,8,12,18,22,37,38,39,40,41,42,43,51,65,73,76,77,79,],[11,11,-3,-4,-5,-6,-7,-8,11,-2,11,-19,-9,-10,-11,-12,-13,-14,11,-15,11,-16,11,-17,]),'LBRACE':([0,2,3,4,5,6,7,8,12,18,22,37,38,39,40,41,42,43,51,65,73,76,77,79,],[12,12,-3,-4,-5,-6,-7,-8,12,-2,12,-19,-9,-10,-11,-12,-13,-14,12,-15,12,-16,12,-17,]),'INT':([0,2,3,4,5,6,7,8,12,18,22,37,38,39,40,41,42,43,51,65,73,76,77,79,],[13,13,-3,-4,-5,-6,-7,-8,13,-2,13,-19,-9,-10,-11,-12,-13,-14,13,-15,13,-16,13,-17,]),'FLOAT':([0,2,3,4,5,6,7,8,12,18,22,37,38,39,40,41,42,43,51,65,73,76,77,79,],[14,14,-3,-4,-5,-6,-7,-8,14,-2,14,-19,-9,-10,-11,-12,-13,-14,14,-15,14,-16,14,-17,]),'CHAR':([0,2,3,4,5,6,7,8,12,18,22,37,38,39,40,41,42,43,51,65,73,76,77,79,],[15,15,-3,-4,-5,-6,-7,-8,15,-2,15,-19,-9,-10,-11,-12,-13,-14,15,-15,15,-16,15,-17,]),'DOUBLE':([0,2,3,4,5,6,7,8,12,18,22,37,38,39,40,41,42,43,51,65,73,76,77,79,],[16,16,-3,-4,-5,-6,-7,-8,16,-2,16,-19,-9,-10,-11,-12,-13,-14,16,-15,16,-16,16,-17,]),'VOID':([0,2,3,4,5,6,7,8,12,18,22,37,38,39,40,41,42,43,51,65,73,76,77,79,],[17,17,-3,-4,-5,-6,-7,-8,17,-2,17,-19,-9,-10,-11,-12,-13,-14,17,-15,17,-16,17,-17,]),'$end':([1,2,3,4,5,6,7,8,18,37,38,39,40,41,42,43,65,76,79,],[0,-1,-3,-4,-5,-6,-7,-8,-2,-19,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),'RBRACE':([3,4,5,6,7,8,18,22,37,38,39,40,41,42,43,65,76,79,],[-3,-4,-5,-6,-7,-8,-2,37,-19,-9,-10,-11,-12,-13,-14,-15,-16,-17,]),'ELSE':([4,5,6,7,8,37,38,39,40,41,42,43,65,76,79,],[-4,-5,-6,-7,-8,-19,-9,-10,-11,-12,-13,-14,73,-16,-17,]),'ASSIGN':([9,75,],[19,78,]),'LPAREN':([10,11,19,20,30,33,36,43,44,45,46,47,48,52,53,54,55,56,57,78,],[20,21,33,33,33,33,33,-14,33,33,33,33,33,33,33,33,33,33,33,33,]),'MINUS':([19,20,28,29,30,31,32,33,35,36,43,44,45,46,47,48,49,50,52,53,54,55,56,57,59,60,61,62,63,64,66,67,68,69,70,71,78,80,],[30,30,-26,45,30,-27,-28,30,45,30,-14,30,30,30,30,30,-25,45,30,30,30,30,30,30,-20,-21,-22,-23,-24,-29,45,45,45,45,45,45,30,45,]),'CONSTANT':([19,20,30,33,36,43,44,45,46,47,48,52,53,54,55,56,57,78,],[31,31,31,31,31,-14,31,31,31,31,31,31,31,31,31,31,31,31,]),'FLOAT_CONSTANT':([19,20,30,33,36,43,44,45,46,47,48,52,53,54,55,56,57,78,],[32,32,32,32,32,-14,32,32,32,32,32,32,32,32,32,32,32,32,]),'SEMICOLON':([23,24,25,26,27,28,29,31,32,49,58,59,60,61,62,63,64,66,67,68,69,70,71,],[38,39,40,41,42,-26,43,-27,-28,-25,72,-20,-21,-22,-23,-24,-29,-30,-31,-32,-33,-34,-35,]),'PLUS':([28,29,31,32,35,49,50,59,60,61,62,63,64,66,67,68,69,70,71,80,],[-26,44,-27,-28,44,-25,44,-20,-21,-22,-23,-24,-29,44,44,44,44,44,44,44,]),'TIMES':([28,29,31,32,35,49,50,59,60,61,62,63,64,66,67,68,69,70,71,80,],[-26,46,-27,-28,46,-25,46,46,46,-22,-23,-24,-29,46,46,46,46,46,46,46,]),'DIVIDE':([28,29,31,32,35,49,50,59,60,61,62,63,64,66,67,68,69,70,71,80,],[-26,47,-27,-28,47,-25,47,47,47,-22,-23,-24,-29,47,47,47,47,47,47,47,]),'MODULO':([28,29,31,32,35,49,50,59,60,61,62,63,64,66,67,68,69,70,71,80,],[-26,48,-27,-28,48,-25,48,48,48,-22,-23,-24,-29,48,48,48,48,48,48,48,]),'LT':([28,31,32,35,49,59,60,61,62,63,64,],[-26,-27,-28,52,-25,-20,-21,-22,-23,-24,-29,]),'LE':([28,31,32,35,49,59,60,61,62,63,64,],[-26,-27,-28,53,-25,-20,-21,-22,-23,-24,-29,]),'GT':([28,31,32,35,49,59,60,61,62,63,64,],[-26,-27,-28,54,-25,-20,-21,-22,-23,-24,-29,]),'GE':([28,31,32,35,49,59,60,61,62,63,64,],[-26,-27,-28,55,-25,-20,-21,-22,-23,-24,-29,]),'EQ':([28,31,32,35,49,59,60,61,62,63,64,],[-26,-27,-28,56,-25,-20,-21,-22,-23,-24,-29,]),'NE':([28,31,32,35,49,59,60,61,62,63,64,],[-26,-27,-28,57,-25,-20,-21,-22,-23,-24,-29,]),'RPAREN':([28,31,32,34,49,50,59,60,61,62,63,64,66,67,68,69,70,71,74,80,],[-26,-27,-28,51,-25,64,-20,-21,-22,-23,-24,-29,-30,-31,-32,-33,-34,-35,77,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,12,],[2,22,]),'statement':([0,2,12,22,51,73,77,],[3,18,3,18,65,76,79,]),'assignment':([0,2,12,21,22,51,73,77,],[4,4,4,36,4,4,4,4,]),'if_statement':([0,2,12,22,51,73,77,],[5,5,5,5,5,5,5,]),'for_statement':([0,2,12,22,51,73,77,],[6,6,6,6,6,6,6,]),'block':([0,2,12,22,51,73,77,],[7,7,7,7,7,7,7,]),'declaration':([0,2,12,22,51,73,77,],[8,8,8,8,8,8,8,]),'expression':([19,20,30,33,36,44,45,46,47,48,52,53,54,55,56,57,78,],[29,35,49,50,35,59,60,61,62,63,66,67,68,69,70,71,80,]),'condition':([20,36,],[34,58,]),'for_increment':([72,],[74,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',17),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',24),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',25),
  ('statement -> assignment','statement',1,'p_statement','parser.py',34),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',35),
  ('statement -> for_statement','statement',1,'p_statement','parser.py',36),
  ('statement -> block','statement',1,'p_statement','parser.py',37),
  ('statement -> declaration','statement',1,'p_statement','parser.py',38),
  ('declaration -> INT ID SEMICOLON','declaration',3,'p_declaration','parser.py',44),
  ('declaration -> FLOAT ID SEMICOLON','declaration',3,'p_declaration','parser.py',45),
  ('declaration -> CHAR ID SEMICOLON','declaration',3,'p_declaration','parser.py',46),
  ('declaration -> DOUBLE ID SEMICOLON','declaration',3,'p_declaration','parser.py',47),
  ('declaration -> VOID ID SEMICOLON','declaration',3,'p_declaration','parser.py',48),
  ('assignment -> ID ASSIGN expression SEMICOLON','assignment',4,'p_assignment','parser.py',53),
  ('if_statement -> IF LPAREN condition RPAREN statement','if_statement',5,'p_if_statement','parser.py',58),
  ('if_statement -> IF LPAREN condition RPAREN statement ELSE statement','if_statement',7,'p_if_statement','parser.py',59),
  ('for_statement -> FOR LPAREN assignment condition SEMICOLON for_increment RPAREN statement','for_statement',8,'p_for_statement','parser.py',68),
  ('for_increment -> ID ASSIGN expression','for_increment',3,'p_for_increment','parser.py',73),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',78),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',83),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',84),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',85),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',86),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','parser.py',87),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','parser.py',92),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',97),
  ('expression -> CONSTANT','expression',1,'p_expression_constant','parser.py',102),
  ('expression -> FLOAT_CONSTANT','expression',1,'p_expression_constant','parser.py',103),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_paren','parser.py',108),
  ('condition -> expression LT expression','condition',3,'p_condition','parser.py',113),
  ('condition -> expression LE expression','condition',3,'p_condition','parser.py',114),
  ('condition -> expression GT expression','condition',3,'p_condition','parser.py',115),
  ('condition -> expression GE expression','condition',3,'p_condition','parser.py',116),
  ('condition -> expression EQ expression','condition',3,'p_condition','parser.py',117),
  ('condition -> expression NE expression','condition',3,'p_condition','parser.py',118),
]
